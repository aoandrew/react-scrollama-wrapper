import React from "react"
import Head from "next/head"
import styles from "../styles/Home.module.css"
import { Scrollama, Step } from "@ap.cx/react-scrollama-wrapper"

export default function Home() {
  const [step, setStep] = React.useState(null)
  const [progress, setProgress] = React.useState(null)
  const [direction, setDirection] = React.useState(null)
  const [message, setMessage] = React.useState('')
  const settings = {
    progress: true,
    debug: false,
    offset: 0.33,
    threshold: 4,
  }

  const onStepEnter = (step) => {
    /* add your logic here */
    const { element, direction } = step
    setMessage(JSON.stringify(element.dataset, null, 2))
    setDirection(direction)
    setStep(step)
    element.classList.add(styles.active);
  }

  const onStepExit = (step) => {
    /* add your logic here */
    const { element } = step
    console.log('onStepExit', element);
    element.classList.remove(styles.active);
  }

  const onStepProgress = (step) => {
    /* add your logic here */
    const { progress } = step
    console.log('onStepProgress', progress);
    setProgress(progress)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>React Scrollama Wrapper</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main
        className={styles.main}
        style={{ "--progress": Math.round((progress * 1000) / 10) + "%" }}
      >
        <Scrollama
          className={styles.scrolly}
          offset={settings.offset}
          progress={settings.progress}
          threshold={settings.threshold}
          onStepProgress={onStepProgress}
          onStepEnter={onStepEnter}
          onStepExit={onStepExit}
          debug={settings.debug}
        >
          <Step
            className={styles.step}
            style={{ marginTop: "33vh", minHeight: "66vh" }}
          >
            <a href="https://www.anotherplanet.io">
              <h2>Scrollama &rarr;</h2>
              <p>
                Scrollama is a modern and lightweight JavaScript library for
                scrollytelling using IntersectionObserver in favor of scroll
                events.
              </p>
              <p>
                Using IntersectionObserver abstracts element-in-view detection
                and removes the need to monitor scroll events, which contribute
                towards a sluggish experience.
              </p>
            </a>
          </Step>
          <Step 
            className={styles.step} 
            style={{ minHeight: "80vh" }}
            data-step-name={"onStepEnter documentation"}
          >
            <a href="https://www.anotherplanet.io">
              <h2>onStepEnter &rarr;</h2>
              <p>
                Callback that fires when the top or bottom edge of a step
                element enters the offset threshold.
              </p>
            </a>
          </Step>
          <Step
            className={styles.step}
            style={{ minHeight: "130vh" }}
            data-step-name={"onStepExit documentation"}
          >
            <a href="https://www.anotherplanet.io">
              <h2>onStepExit &rarr;</h2>
              <p>
                Callback that fires when the top or bottom edge of a step
                element exits the offset threshold.
              </p>
            </a>
          </Step>

          <Step
            className={styles.step}
            style={{ minHeight: "66vh" }}
            data-step-name={"onStepProgress documentation"}
          >
            <a href="https://www.anotherplanet.io">
              <h2>onStepProgress &rarr;</h2>
              <p>
                Callback that fires the progress (0 - 1) a step has made through
                the threshold.
              </p>
            </a>
          </Step>

          <Step
            className={styles.step}
            data-offset={0.1}
            style={{ minHeight: "66vh" }}
            data-step-name={"Data Offset documentation"}
          >
            <a href="https://www.anotherplanet.io">
              <h2>Data Offset &rarr;</h2>
              <p>
                Add data-offset to your step to replace the default offset for this element only.
              </p>
              <p>
                This data-offset is set to 0.1. (10%).
              </p>
            </a>
          </Step>

          <Step className={styles.step} style={{ minHeight: "80vh" }}>
            <a href="https://www.anotherplanet.io">
              <h2>props &rarr;</h2>
              <p>
                Every props set to the step is sent to the scrollama component
                and can be used in the srollyteling.
              </p>
              <p>Like data for D3js, image, url, mapbox lat/lngâ€¦</p>
            </a>
          </Step>

          <Step
            className={styles.step}
            style={{ marginBottom: "67vh", minHeight: "60vh" }}
          >
            <a href="https://www.anotherplanet.io">
              <h2>Anotherplanet.io &rarr;</h2>
              <p>My Self Bragging page about my life and work.</p>
            </a>
          </Step>
        </Scrollama>

        <div className={styles.board}>
          <h1 className={styles.title}>
            Welcome to <br />
            React Scrollama Wrapper
          </h1>
          {progress !== null && (
            <div className={styles.progress}>
              <div className={styles.counter}>{ Math.round((progress * 1000) / 10) }</div>
              <div className={styles.counterInfo}>
                <div className={styles.unit}>%</div>
                <div className={[styles.arrow, step.direction === 'up' ? styles.up : null].join(' ')}>&darr;</div>
              </div> 
              
            </div>
          )}
          <h3>Data</h3>
          {message && <pre><code>{message}</code></pre>}
        </div>
      </main>
    </div>
  )
}
